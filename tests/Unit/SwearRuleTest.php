<?php

namespace Tests\Unit;

use App\Rules\SwearRule;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

/**
 * Class SwearRuleTest.
 *
 * @coversDefaultClass \App\Rules\SwearRule
 */
class SwearRuleTest extends TestCase
{
    /**
     * @var SwearRule;
     */
    private $rule;

    /**
     * Prepare for test.
     */
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->rule = new SwearRule();
    }

    /**
     * Destroy test
     */
    protected function tearDown()
    {
        $this->rule = null;

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    public function swearsDataProvider()
    {
        return [
            ['Sudas'],
            ['Rupuze'],
            ['rUpuze'],
            ['rupuzE'],
            ['ruPuzE'],
            ['ruPuze'],
            ['Rupus miltai'],
        ];
    }

    /**
     * @return array
     */
    public function goodWordsDataProvider()
    {
        return [
            ['Gelyte'],
            ['Suniukas'],
            ['Kaimyne'],
            ['kate'],
        ];
    }

    /**
     * A basic test example.
     *
     * @dataProvider goodWordsDataProvider
     * @covers ::passes()
     * @group swearsGroup
     * @test
     *
     * @return void
     */
    public function swearRuleSuccess($swear)
    {
        $this->assertTrue($this->rule->passes('test', $swear));
    }

    /**
     * A basic test example.
     *
     * @dataProvider swearsDataProvider
     * @covers ::passes()
     * @test
     *
     * @return void
     */
    public function swearRuleFail($swear)
    {
        $this->assertFalse($this->rule->passes('test', $swear));
    }
}
